// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  CLIENT
  BUSINESSMAN
}

model User {
  id             Int      @id @default(autoincrement())
  username       String   @unique
  password       String   @db.VarChar(60)
  email          String   @unique
  name           String
  lastname       String?  @default("")
  profilePicture String?
  phone          String?
  role           ROLE
  createdAt      DateTime @default(now())
  confirmed      Boolean  @default(false)

  businessman Businessman?
  client      Customer?

  token   Token? @relation("UserToken")
  tokenId Int?   @unique

  @@index([username])
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @unique
  expiresAt DateTime @default(now()) @db.Timestamptz
  user      User     @relation("UserToken", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Businessman {
  id Int @unique

  user User @relation(fields: [id], references: [id], onDelete: Cascade)

  business Business[]
}

model Business {
  id               Int       @id @default(autoincrement())
  businessmanId    Int
  name             String
  picture          String?
  description      String
  location         String
  adress           String
  whatsapp         String?
  instagram        String?
  x                String?
  facebook         String?
  rate             Int?
  isActive         Boolean   @default(true)
  deactivationDate DateTime? // campo para la fecha de desactivaci√≥n

  businessman Businessman @relation(fields: [businessmanId], references: [id], onDelete: Cascade)
}

model Product {
  id          Int     @id @default(autoincrement())
  businessId  Int
  name        String
  description String
  price       Float
  stock       Int
  category    String
  rate        Int     @default(0)
  isActive    Boolean @default(true)
  tags        String
  imageUrl    String
}

model Customer {
  id Int @unique

  user User @relation(fields: [id], references: [id], onDelete: Cascade)
}
